import SwiftUI

class ðŸ¥½AppModel: ObservableObject {
    @Published var isPresentedSettingButton: Bool = false
    @Published var isClosedClockWindow: Bool = false
    @AppStorage(ðŸ’¾Key.showYear) var showYear: Bool = false
    @AppStorage(ðŸ’¾Key.hideWeekday) var hideWeekday: Bool = false
    @AppStorage(ðŸ’¾Key.hideDate) var hideDate: Bool = false
    @AppStorage(ðŸ’¾Key.showSecond) var showSecond: Bool = false
    @AppStorage(ðŸ’¾Key.fontSize) var fontSize: Int = 100
    @AppStorage(ðŸ’¾Key.fontWeight) var fontWeight: ðŸ’¾Option.FontWeight = .bold
    @AppStorage(ðŸ’¾Key.fontDesign) var fontDesign: ðŸ’¾Option.FontDesign = .default
    @Published var textColor: Color = ðŸ’¾Option.load()
    @AppStorage(ðŸ’¾Key.padding) var padding: Int = 32
    @AppStorage(ðŸ’¾Key.opacity) var opacity: Double = 1.0
    @AppStorage(ðŸ’¾Key.hideBackground) var hideBackground: Bool = false
    @AppStorage(ðŸ’¾Key.angle) var angle: Int = 0
    @AppStorage(ðŸ’¾Key.animation) var animation: ðŸ’¾Option.Animation.Case = .disable
    @AppStorage(ðŸ’¾Key.showBattery) var showBattery: Bool = false
    @AppStorage(ðŸ’¾Key.showBatteryNumber) var showBatteryNumber: Bool = false
    @AppStorage(ðŸ’¾Key.tapCountForOpenSettingButton) var tapCountForSettingButton: Int = 1
    @AppStorage(ðŸ’¾Key.customizeDateTimeLayout) var customizeDateTimeLayout: Bool = false
    @AppStorage(ðŸ’¾Key.datePosition) var datePosition: ðŸ’¾Option.Layout = .left
    @AppStorage(ðŸ’¾Key.spaceBetweenDateAndTime) var spaceBetweenDateAndTime: Int = 0
    @AppStorage(ðŸ’¾Key.batteryPosition) var batteryPosition: ðŸ’¾Option.Layout = .right
    @AppStorage(ðŸ’¾Key.spaceBetweenClockAndBattery) var spaceBetweenClockAndBattery: Int = 0
}
